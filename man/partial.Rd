% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/partial.R
\name{partial}
\alias{partial}
\title{Partial apply a function, filling in some arguments.}
\usage{
partial(...f, ..., .env = NULL, .lazy = NULL, .first = TRUE)
}
\arguments{
\item{...f}{a function. For the output source to read well, this should be a
named function.}

\item{...}{named arguments to \code{...f} that should be partially applied.

These dots support quasiquotation and quosures. If you unquote a
value, it is evaluated once and for all when the argument is
partialised. Otherwise, it is evaluated each time the function is
called.}

\item{.env}{Soft-deprecated as of purrr 0.3.0. The environments are
now captured via quosures.}

\item{.lazy}{Soft-deprecated as of purrr 0.3.0. Please unquote the
arguments that should be evaluated once and for all.}

\item{.first}{If \code{TRUE}, the partialized arguments are placed
to the front of the function signature. If \code{FALSE}, they are
moved to the back. Only useful to control position matching of
arguments when the partialized arguments are not named.}
}
\description{
Partial function application allows you to modify a function by pre-filling
some of the arguments.  It is particularly useful in conjunction with
functionals and other function operators.
}
\examples{
# Partial is designed to replace the use of anonymous functions for
# filling in function arguments. Instead of:
compact1 <- function(x) discard(x, is.null)

# we can write:
compact2 <- partial(discard, .p = is.null)

# and the generated source code is very similar to what we made by hand
compact1
compact2

# Note that the evaluation occurs "lazily" so that arguments will be
# repeatedly evaluated
f <- partial(runif, n = rpois(1, 5))
f
f()
f()

# If you unquote an argument, it is evaluated once and for all:
f <- partial(runif, n = !!rpois(1, 5))
f
f()
f()

# This also means that partial works fine with functions that do
# non-standard evaluation
my_long_variable <- 1:10
plot2 <- partial(plot, my_long_variable)
plot2()
plot2(runif(10), type = "l")
}
